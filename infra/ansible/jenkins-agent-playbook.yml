---
- name: Configuration Jenkins Agent
  hosts: jenkins_agents
  become: true
  vars:
    jenkins_agent_user: jenkins
    jenkins_agent_home: /home/jenkins
  
  tasks:

    # Fix Docker APT (coh√©rent avec master)
    - name: Fix Docker APT
      script: ../../scripts/fix_docker_apt.sh

    # Installation base
    - name: Install base packages
      apt:
        name:
          - openjdk-17-jdk
          - curl
          - wget
          - git
          - unzip
        update_cache: yes

    - name: Set timezone
      timezone:
        name: Europe/Paris

    # Helm & Kubernetes CLI
    - name: Install Helm
      shell: |
        curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 /tmp/get_helm.sh
        /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm
      tags: [helm, k8s]

    - name: Install kubectl
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm -f kubectl
      args:
        creates: /usr/local/bin/kubectl
      tags: [helm, k8s]

    - name: Install yq (YAML processor)
      shell: |
        wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        chmod +x /usr/local/bin/yq
      args:
        creates: /usr/local/bin/yq
      tags: [helm, k8s]

    - name: Install jq (JSON processor)
      apt:
        name: jq
        state: present
        update_cache: yes
      tags: [helm, k8s]

    # Node.js (m√™me m√©thode que master)
    - name: Setup Node.js
      block:
        - name: Create Node.js directory
          file:
            path: /opt/nodejs
            state: directory

        - name: Download and extract Node.js
          unarchive:
            src: https://nodejs.org/dist/v18.19.0/node-v18.19.0-linux-x64.tar.xz
            dest: /opt/nodejs
            remote_src: yes
            extra_opts: [--strip-components=1]
            creates: /opt/nodejs/bin/node

        - name: Create Node.js symlinks
          file:
            src: "/opt/nodejs/bin/{{ item }}"
            dest: "/usr/local/bin/{{ item }}"
            state: link
          loop: [node, npm, npx]

    # Jenkins user et agent
    - name: Setup Jenkins agent
      block:
        - name: Create jenkins user
          user:
            name: "{{ jenkins_agent_user }}"
            home: "{{ jenkins_agent_home }}"
            shell: /bin/bash

        - name: Create agent directory
          file:
            path: "{{ jenkins_agent_home }}/agent"
            state: directory
            owner: "{{ jenkins_agent_user }}"
            group: "{{ jenkins_agent_user }}"

        - name: Get Jenkins credentials from environment
          set_fact:
            jenkins_admin_user: "{{ lookup('env', 'JENKINS_ADMIN_USERNAME') | default('admin') }}"
            jenkins_admin_password: "{{ lookup('env', 'JENKINS_ADMIN_PASSWORD') | default('admin') }}"
            jenkins_master_ip: "{{ lookup('env', 'JENKINS_IP') }}"

        - name: Wait for Jenkins to be ready
          uri:
            url: "http://{{ jenkins_master_ip }}:8080/login"
            method: GET
            timeout: 30
          retries: 10
          delay: 30
          register: jenkins_ready

        - name: Create Jenkins node via API
          uri:
            url: "http://{{ jenkins_master_ip }}:8080/computer/doCreateItem"
            method: POST
            user: "{{ jenkins_admin_user }}"
            password: "{{ jenkins_admin_password }}"
            force_basic_auth: yes
            body_format: form-urlencoded
            body:
              name: "jenkins-agent"
              type: "hudson.slaves.DumbSlave"
              json: |
                {
                  "name": "jenkins-agent",
                  "nodeDescription": "Jenkins Agent Node",
                  "numExecutors": "2",
                  "remoteFS": "{{ jenkins_agent_home }}/workspace",
                  "labelString": "agent docker",
                  "mode": "NORMAL",
                  "launcher": {
                    "stapler-class": "hudson.slaves.JNLPLauncher",
                    "$class": "hudson.slaves.JNLPLauncher",
                    "workDirSettings": {
                      "disabled": false,
                      "workDirPath": "{{ jenkins_agent_home }}/workspace",
                      "internalDir": "remoting"
                    }
                  },
                  "retentionStrategy": {
                    "stapler-class": "hudson.slaves.RetentionStrategy$Always",
                    "$class": "hudson.slaves.RetentionStrategy$Always"
                  },
                  "nodeProperties": {
                    "stapler-class-bag": "true"
                  }
                }
            status_code: [200, 302]
          ignore_errors: yes

        - name: Get agent secret via API
          uri:
            url: "http://{{ jenkins_master_ip }}:8080/computer/jenkins-agent/slave-agent.jnlp"
            method: GET
            user: "{{ jenkins_admin_user }}"
            password: "{{ jenkins_admin_password }}"
            force_basic_auth: yes
            return_content: yes
          register: agent_jnlp
          retries: 3
          delay: 10

        - name: Extract secret from JNLP
          set_fact:
            jenkins_agent_secret: "{{ agent_jnlp.content | regex_search('<argument>([a-f0-9]+)</argument>', '\\1') | first }}"
          when: agent_jnlp is defined and agent_jnlp.content is defined

        - name: Download agent.jar
          get_url:
            url: "http://{{ jenkins_master_ip }}:8080/jnlpJars/agent.jar"
            dest: "{{ jenkins_agent_home }}/agent/agent.jar"
            owner: "{{ jenkins_agent_user }}"
            group: "{{ jenkins_agent_user }}"
            force_basic_auth: yes
            url_username: "{{ jenkins_admin_user }}"
            url_password: "{{ jenkins_admin_password }}"

        - name: Create start script
          copy:
            content: |
              #!/bin/bash
              cd {{ jenkins_agent_home }}/agent
              java -jar agent.jar -jnlpUrl http://{{ jenkins_master_ip }}:8080/computer/jenkins-agent/slave-agent.jnlp -secret {{ jenkins_agent_secret }} -workDir {{ jenkins_agent_home }}/workspace
            dest: "{{ jenkins_agent_home }}/start-agent.sh"
            owner: "{{ jenkins_agent_user }}"
            group: "{{ jenkins_agent_user }}"
            mode: '0755'
          when: jenkins_agent_secret is defined

        - name: Create systemd service
          copy:
            content: |
              [Unit]
              Description=Jenkins Agent
              After=network.target

              [Service]
              Type=simple
              User={{ jenkins_agent_user }}
              ExecStart={{ jenkins_agent_home }}/start-agent.sh
              Restart=always
              RestartSec=10

              [Install]
              WantedBy=multi-user.target
            dest: /etc/systemd/system/jenkins-agent.service
          when: jenkins_agent_secret is defined

        - name: Create workspace directory
          file:
            path: "{{ jenkins_agent_home }}/workspace"
            state: directory
            owner: "{{ jenkins_agent_user }}"
            group: "{{ jenkins_agent_user }}"

    # Docker (m√™me m√©thode que les autres playbooks)
    - name: Install Docker
      shell: |
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      timeout: 300
      retries: 2
      delay: 10

    - name: Setup Docker for Jenkins
      block:
        - name: Start Docker
          systemd:
            name: docker
            enabled: yes
            state: started

        - name: Add jenkins to docker group
          user:
            name: "{{ jenkins_agent_user }}"
            groups: docker
            append: yes

        - name: Start Jenkins agent service
          systemd:
            name: jenkins-agent
            enabled: yes
            state: started
            daemon_reload: yes
          when: jenkins_agent_secret is defined

    - name: Display Jenkins agent info
      debug:
        msg: 
          - "‚úÖ Jenkins Agent configured"
          - "üîó Connect to Jenkins master at: http://{{ jenkins_master_ip }}:8080"
          - "üë§ Agent user: {{ jenkins_agent_user }}"
          - "üìÅ Agent home: {{ jenkins_agent_home }}"
      when: jenkins_agent_secret is defined
