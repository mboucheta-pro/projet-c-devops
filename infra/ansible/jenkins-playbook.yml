---
- name: Configuration de Jenkins
  hosts: jenkins
  become: true
  vars:
    java_packages:
      - openjdk-17-jdk
    jenkins_admin_username: "{{ lookup('env', 'JENKINS_ADMIN_USERNAME') }}"
    jenkins_admin_password: "{{ lookup('env', 'JENKINS_ADMIN_PASSWORD') }}"
    git_repo_url: "{{ lookup('env', 'GIT_REPO_URL') | default('https://github.com/votre-utilisateur/projet-c-app.git') }}"
    git_credentials_id: "{{ lookup('env', 'GIT_CREDENTIALS_ID') | default('') }}"
    aws_credentials_base64: "{{ lookup('env', 'AWS_CREDENTIALS_BASE64') | default('') }}"
    jenkins_java_options: "-Djenkins.install.runSetupWizard=false"
    jenkins_http_port: 8080
    node_version: "18.19.0"
  vars_files:
    - vars/jenkins.yml
  pre_tasks:
    - name: Enable 'universe' repository on Ubuntu
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: present
      when: ansible_distribution == 'Ubuntu'
    
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Installation des outils nécessaires pour Terraform et AWS
      apt:
        name:
          - jq
          - unzip
          - python3-pip
          - curl
          - wget
          - build-essential
          - git
          - ca-certificates
          - gnupg
          - lsb-release
        state: present

    # Installation de Node.js via NodeSource
    - name: Ajouter la clé GPG NodeSource
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Ajouter le dépôt NodeSource pour Node.js 18.x
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_18.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Installer Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes

    - name: Vérifier l'installation de Node.js et npm
      command: "{{ item }}"
      loop:
        - node --version
        - npm --version
      register: node_check
      changed_when: false

    - name: Afficher les versions installées
      debug:
        msg: "{{ item.stdout }}"
      loop: "{{ node_check.results }}"

    # Installation de Docker pour Jenkins master
    - name: Ajouter la clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Ajouter le dépôt Docker
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Installer Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Ajouter l'utilisateur jenkins au groupe docker
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Téléchargement d'AWS CLI v2
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
        mode: '0644'
        
    - name: Extraction d'AWS CLI v2
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes
        creates: /tmp/aws
        
    - name: Installation d'AWS CLI v2
      command: /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
        
    - name: Téléchargement de Terraform
      get_url:
        url: https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        dest: /tmp/terraform.zip
        mode: '0644'
      
    - name: Installation de Terraform
      unarchive:
        src: /tmp/terraform.zip
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
        creates: /usr/local/bin/terraform

    - name: Activer NTP avec timedatectl
      become: yes
      ansible.builtin.command: timedatectl set-ntp true
      changed_when: false

    - name: Configurer la timezone sur Europe/Paris
      timezone:
        name: Europe/Paris

  roles:
    - role: geerlingguy.java
    - role: geerlingguy.jenkins

  post_tasks:
    - name: Attendre que Jenkins soit disponible
      uri:
        url: http://localhost:{{ jenkins_http_port }}/api/json
        method: GET
        user: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_admin_password }}"
        force_basic_auth: yes
        status_code: 200
        timeout: 5
      register: jenkins_api_status
      until: jenkins_api_status.status == 200
      retries: 30
      delay: 10

    # Redémarrer Jenkins pour prendre en compte les nouveaux groupes
    - name: Redémarrer Jenkins pour prendre en compte le groupe docker
      systemd:
        name: jenkins
        state: restarted
        daemon_reload: yes

    - name: Attendre que Jenkins soit de nouveau disponible après redémarrage
      uri:
        url: http://localhost:{{ jenkins_http_port }}/api/json
        method: GET
        user: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_admin_password }}"
        force_basic_auth: yes
        status_code: 200
        timeout: 5
      register: jenkins_restart_status
      until: jenkins_restart_status.status == 200
      retries: 30
      delay: 10

    # Configuration de l'environnement pour l'utilisateur jenkins
    - name: Créer le fichier .bashrc pour l'utilisateur jenkins
      copy:
        dest: /var/lib/jenkins/.bashrc
        owner: jenkins
        group: jenkins
        mode: '0644'
        content: |
          # Fichier .bashrc pour Jenkins
          export PATH=$PATH:/usr/local/bin:/opt/sonar-scanner/bin
          export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:/bin/java::")
          export NODE_OPTIONS="--max-old-space-size=4096"
          
          # Aliases utiles
          alias ll='ls -alF'
          alias la='ls -A'
          alias l='ls -CF'

    - name: Installer Trivy pour les scans de sécurité
      shell: |
        curl -sfL https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update
        apt-get install -y trivy
      args:
        creates: /usr/bin/trivy
        
    - name: Télécharger le CLI de SonarQube Scanner
      get_url:
        url: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        dest: /tmp/sonar-scanner-cli.zip
        mode: '0644'
        
    - name: Créer le répertoire pour SonarQube Scanner
      file:
        path: /opt/sonar-scanner
        state: directory
        mode: '0755'
        
    - name: Extraire le SonarQube Scanner
      unarchive:
        src: /tmp/sonar-scanner-cli.zip
        dest: /opt
        remote_src: yes
        creates: /opt/sonar-scanner-4.8.0.2856-linux
        
    - name: Créer un lien symbolique pour SonarQube Scanner
      file:
        src: /opt/sonar-scanner-4.8.0.2856-linux
        dest: /opt/sonar-scanner
        state: link
        
    - name: Ajouter SonarQube Scanner au PATH
      copy:
        content: 'export PATH=$PATH:/opt/sonar-scanner/bin'
        dest: /etc/profile.d/sonarqube.sh
        mode: '0644'
        
    - name: Récupérer les secrets SonarQube depuis AWS Secrets Manager
      shell: >
        aws secretsmanager get-secret-value 
        --secret-id 'projet-c-devops-sonarqube-credentials' 
        --region ca-central-1 
        --query SecretString 
        --output text
      register: sonarqube_credentials
      become: false
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') | default('') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') | default('') }}"
        
    - name: Définir les variables SonarQube
      set_fact:
        sonarqube_host: "http://{{ lookup('env', 'SONARQUBE_IP') | default('localhost') }}:9000"
        sonarqube_admin_username: "{{ (sonarqube_credentials.stdout | from_json).admin_username | default('admin') }}"
        sonarqube_admin_password: "{{ (sonarqube_credentials.stdout | from_json).admin_password | default('admin') }}"
      when: sonarqube_credentials.stdout is defined
        
    - name: Créer le script de configuration des outils Jenkins
      copy:
        content: |
          #!/bin/bash
          
          # Configuration des outils dans Jenkins via Jenkins CLI
          jenkins_url="http://localhost:{{ jenkins_http_port }}"
          admin_user="{{ jenkins_admin_username }}"
          admin_pass="{{ jenkins_admin_password }}"
          
          # Télécharger Jenkins CLI
          wget -q ${jenkins_url}/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar
          
          # Fonction pour exécuter des commandes Jenkins CLI
          run_jenkins_cli() {
            java -jar /tmp/jenkins-cli.jar -s ${jenkins_url} -auth ${admin_user}:${admin_pass} "$@"
          }
          
          # Configurer SonarQube Scanner
          cat > /tmp/sonarqube-scanner-tool.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <hudson.plugins.sonar.SonarRunnerInstallation>
            <name>SonarQubeScanner</name>
            <properties>
              <hudson.tools.InstallSourceProperty>
                <installers>
                  <hudson.plugins.sonar.SonarRunnerInstaller>
                    <id>4.8.0.2856</id>
                  </hudson.plugins.sonar.SonarRunnerInstaller>
                </installers>
              </hudson.tools.InstallSourceProperty>
            </properties>
          </hudson.plugins.sonar.SonarRunnerInstallation>
          EOF
          
          # Configuration du serveur SonarQube
          cat > /tmp/sonar-server-config.xml << EOF
          <?xml version='1.1' encoding='UTF-8'?>
          <hudson.plugins.sonar.SonarGlobalConfiguration>
            <installations>
              <hudson.plugins.sonar.SonarInstallation>
                <name>SonarQube</name>
                <serverUrl>{{ sonarqube_host }}</serverUrl>
                <credentialsId>sonarqube-credentials</credentialsId>
                <mojoVersion></mojoVersion>
                <additionalProperties></additionalProperties>
                <additionalAnalysisProperties></additionalAnalysisProperties>
              </hudson.plugins.sonar.SonarInstallation>
            </installations>
            <buildWrapperEnabled>true</buildWrapperEnabled>
            <dataMigrated>true</dataMigrated>
            <credentialsMigrated>true</credentialsMigrated>
          </hudson.plugins.sonar.SonarGlobalConfiguration>
          EOF
          
          # Créer les credentials SonarQube
          cat > /tmp/sonarqube-credentials.xml << EOF
          <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
            <scope>GLOBAL</scope>
            <id>sonarqube-credentials</id>
            <description>SonarQube credentials</description>
            <username>{{ sonarqube_admin_username }}</username>
            <password>{{ sonarqube_admin_password }}</password>
          </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
          EOF
          
          # Appliquer les configurations
          run_jenkins_cli create-credentials-by-xml system::system::jenkins _ < /tmp/sonarqube-credentials.xml
          run_jenkins_cli groovy = < /tmp/sonar-server-config.xml
          run_jenkins_cli groovy "import hudson.plugins.sonar.SonarRunnerInstallation; import hudson.tools.InstallSourceProperty; import hudson.plugins.sonar.SonarRunnerInstaller; def instance = jenkins.model.Jenkins.getInstance(); def descriptor = instance.getDescriptor(hudson.plugins.sonar.SonarRunnerInstallation.class); def installer = new SonarRunnerInstaller('4.8.0.2856'); def prop = new InstallSourceProperty([installer]); def installation = new SonarRunnerInstallation('SonarQubeScanner', '', [prop]); descriptor.setInstallations(installation); descriptor.save(); instance.save()"
          
          # Nettoyer les fichiers temporaires
          rm -f /tmp/sonarqube-scanner-tool.xml /tmp/sonar-server-config.xml /tmp/sonarqube-credentials.xml
          
          echo "Configuration des outils terminée"
        dest: /tmp/configure-jenkins-tools.sh
        mode: '0755'
        
    - name: Exécuter le script de configuration des outils Jenkins
      command: /tmp/configure-jenkins-tools.sh
      args:
        creates: /var/lib/jenkins/.sonar/sonar-scanner-4.8.0.2856
