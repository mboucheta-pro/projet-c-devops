---
- name: Configuration de Jenkins
  hosts: jenkins
  become: true
  gather_facts: false
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/projet-c.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer Java 11
      yum:
        name: java-11-amazon-corretto
        state: present
      ignore_errors: true
      
    - name: Ajouter le dépôt Jenkins
      yum_repository:
        name: jenkins
        description: Jenkins Repository
        baseurl: https://pkg.jenkins.io/redhat-stable/
        gpgkey: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
        gpgcheck: true
      ignore_errors: true
      
    - name: Installer Jenkins
      yum:
        name: jenkins
        state: present
      ignore_errors: true
      
    - name: Démarrer et activer Jenkins
      systemd:
        name: jenkins
        state: started
        enabled: true
      ignore_errors: true
      
    - name: Installer Docker
      yum:
        name: docker
        state: present
      ignore_errors: true
      
    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: true
      ignore_errors: true
      
    - name: Ajouter jenkins au groupe docker
      user:
        name: jenkins
        groups: docker
        append: true
      ignore_errors: true

- name: Configuration de SonarQube
  hosts: sonarqube
  become: true
  gather_facts: false
  remote_user: ec2-user
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer les dépendances
      yum:
        name:
          - java-17-amazon-corretto
          - unzip
          - wget
        state: present
      ignore_errors: true
      
    - name: Créer l'utilisateur sonarqube
      user:
        name: sonarqube
        shell: /bin/bash
        home: /opt/sonarqube
        create_home: true
      ignore_errors: true
      
    - name: Télécharger SonarQube
      get_url:
        url: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.1.69595.zip
        dest: /tmp/sonarqube.zip
        mode: '0644'
      ignore_errors: true
      
    - name: Extraire SonarQube
      unarchive:
        src: /tmp/sonarqube.zip
        dest: /opt
        remote_src: true
        owner: sonarqube
        group: sonarqube
      ignore_errors: true
      
    - name: Créer un lien symbolique
      file:
        src: /opt/sonarqube-9.9.1.69595
        dest: /opt/sonarqube
        state: link
        owner: sonarqube
        group: sonarqube
      ignore_errors: true
      
    - name: Créer le service SonarQube
      copy:
        dest: /etc/systemd/system/sonarqube.service
        content: |
          [Unit]
          Description=SonarQube service
          After=network.target
          
          [Service]
          Type=simple
          User=sonarqube
          Group=sonarqube
          ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
          ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
      ignore_errors: true
      
    - name: Recharger systemd
      systemd:
        daemon_reload: true
      ignore_errors: true
      
    - name: Démarrer et activer SonarQube
      systemd:
        name: sonarqube
        state: started
        enabled: true
      ignore_errors: true

- name: Configuration du monitoring
  hosts: monitoring
  become: true
  gather_facts: false
  remote_user: ec2-user
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer Docker
      yum:
        name: docker
        state: present
      ignore_errors: true
      
    - name: Installer docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      ignore_errors: true
      
    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: true
      ignore_errors: true
      
    - name: Ajouter l'utilisateur ec2-user au groupe docker
      user:
        name: ec2-user
        groups: docker
        append: true
      ignore_errors: true
      
    - name: Créer le répertoire pour Prometheus et Grafana
      file:
        path: /home/ec2-user/monitoring
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      ignore_errors: true
      
    - name: Créer le fichier docker-compose.yml
      copy:
        dest: /home/ec2-user/monitoring/docker-compose.yml
        content: |
          version: '3'
          services:
            prometheus:
              image: prom/prometheus:latest
              volumes:
                - ./prometheus:/etc/prometheus
                - prometheus_data:/prometheus
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                - '--web.console.templates=/usr/share/prometheus/consoles'
              ports:
                - 9090:9090
              restart: always
          
            grafana:
              image: grafana/grafana:latest
              volumes:
                - grafana_data:/var/lib/grafana
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=admin
                - GF_USERS_ALLOW_SIGN_UP=false
              ports:
                - 3000:3000
              restart: always
          
          volumes:
            prometheus_data:
            grafana_data:
        owner: ec2-user
        group: ec2-user
        mode: '0644'
      ignore_errors: true
      
    - name: Créer le répertoire pour la configuration de Prometheus
      file:
        path: /home/ec2-user/monitoring/prometheus
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      ignore_errors: true
      
    - name: Créer le fichier de configuration Prometheus
      copy:
        dest: /home/ec2-user/monitoring/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
        owner: ec2-user
        group: ec2-user
        mode: '0644'
      ignore_errors: true
      
    - name: Démarrer les conteneurs
      shell: |
        cd /home/ec2-user/monitoring
        docker-compose up -d
      become_user: ec2-user
      ignore_errors: true