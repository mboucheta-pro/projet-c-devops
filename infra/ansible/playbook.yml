---
- name: Configuration du GitHub Runner
  hosts: github_runner
  become: yes
  gather_facts: no
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer les dépendances
      yum:
        name:
          - git
          - docker
        state: present
      ignore_errors: yes
      
    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: yes
      ignore_errors: yes
      
    - name: Ajouter l'utilisateur ec2-user au groupe docker
      user:
        name: ec2-user
        groups: docker
        append: yes
      ignore_errors: yes
      
    - name: Créer le répertoire pour le runner
      file:
        path: /home/ec2-user/actions-runner
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      ignore_errors: yes
      
    - name: Télécharger le runner GitHub
      get_url:
        url: https://github.com/actions/runner/releases/download/v2.311.0/actions-runner-linux-x64-2.311.0.tar.gz
        dest: /home/ec2-user/actions-runner/actions-runner.tar.gz
        mode: '0644'
      ignore_errors: yes
      
    - name: Extraire l'archive du runner
      unarchive:
        src: /home/ec2-user/actions-runner/actions-runner.tar.gz
        dest: /home/ec2-user/actions-runner
        remote_src: yes
        owner: ec2-user
        group: ec2-user
      ignore_errors: yes
      
    - name: Configurer le runner
      shell: |
        cd /home/ec2-user/actions-runner
        ./config.sh --url https://github.com/{{ github_repo }} --token {{ runner_token }} --name "EC2-Runner" --unattended
      become_user: ec2-user
      ignore_errors: yes
      
    - name: Installer le service du runner
      shell: |
        cd /home/ec2-user/actions-runner
        ./svc.sh install
      ignore_errors: yes
      
    - name: Démarrer le service du runner
      shell: |
        cd /home/ec2-user/actions-runner
        ./svc.sh start
      ignore_errors: yes

- name: Configuration de SonarQube
  hosts: sonarqube
  become: yes
  gather_facts: no
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer les dépendances
      yum:
        name:
          - java-17-amazon-corretto
          - unzip
          - wget
        state: present
      ignore_errors: yes
      
    - name: Créer l'utilisateur sonarqube
      user:
        name: sonarqube
        shell: /bin/bash
        home: /opt/sonarqube
        create_home: yes
      ignore_errors: yes
      
    - name: Télécharger SonarQube
      get_url:
        url: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.1.69595.zip
        dest: /tmp/sonarqube.zip
        mode: '0644'
      ignore_errors: yes
      
    - name: Extraire SonarQube
      unarchive:
        src: /tmp/sonarqube.zip
        dest: /opt
        remote_src: yes
        owner: sonarqube
        group: sonarqube
      ignore_errors: yes
      
    - name: Créer un lien symbolique
      file:
        src: /opt/sonarqube-9.9.1.69595
        dest: /opt/sonarqube
        state: link
        owner: sonarqube
        group: sonarqube
      ignore_errors: yes
      
    - name: Créer le service SonarQube
      copy:
        dest: /etc/systemd/system/sonarqube.service
        content: |
          [Unit]
          Description=SonarQube service
          After=network.target
          
          [Service]
          Type=simple
          User=sonarqube
          Group=sonarqube
          ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
          ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
      ignore_errors: yes
      
    - name: Recharger systemd
      systemd:
        daemon_reload: yes
      ignore_errors: yes
      
    - name: Démarrer et activer SonarQube
      systemd:
        name: sonarqube
        state: started
        enabled: yes
      ignore_errors: yes

- name: Configuration du monitoring
  hosts: monitoring
  become: yes
  gather_facts: no
  tasks:
    - name: Attendre que SSH soit disponible
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Installer les dépendances
      yum:
        name:
          - docker
          - docker-compose
        state: present
      ignore_errors: yes
      
    - name: Démarrer et activer Docker
      systemd:
        name: docker
        state: started
        enabled: yes
      ignore_errors: yes
      
    - name: Ajouter l'utilisateur ec2-user au groupe docker
      user:
        name: ec2-user
        groups: docker
        append: yes
      ignore_errors: yes
      
    - name: Créer le répertoire pour Prometheus et Grafana
      file:
        path: /home/ec2-user/monitoring
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      ignore_errors: yes
      
    - name: Créer le fichier docker-compose.yml
      copy:
        dest: /home/ec2-user/monitoring/docker-compose.yml
        content: |
          version: '3'
          services:
            prometheus:
              image: prom/prometheus:latest
              volumes:
                - ./prometheus:/etc/prometheus
                - prometheus_data:/prometheus
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/usr/share/prometheus/console_libraries'
                - '--web.console.templates=/usr/share/prometheus/consoles'
              ports:
                - 9090:9090
              restart: always
          
            grafana:
              image: grafana/grafana:latest
              volumes:
                - grafana_data:/var/lib/grafana
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=admin
                - GF_USERS_ALLOW_SIGN_UP=false
              ports:
                - 3000:3000
              restart: always
          
          volumes:
            prometheus_data:
            grafana_data:
        owner: ec2-user
        group: ec2-user
        mode: '0644'
      ignore_errors: yes
      
    - name: Créer le répertoire pour la configuration de Prometheus
      file:
        path: /home/ec2-user/monitoring/prometheus
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
      ignore_errors: yes
      
    - name: Créer le fichier de configuration Prometheus
      copy:
        dest: /home/ec2-user/monitoring/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
        owner: ec2-user
        group: ec2-user
        mode: '0644'
      ignore_errors: yes
      
    - name: Démarrer les conteneurs
      shell: |
        cd /home/ec2-user/monitoring
        docker-compose up -d
      become_user: ec2-user
      ignore_errors: yes