name: Gestion de l'infra DevOps

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action Ã  effectuer'
        required: true
        default: 'devops-create'
        type: choice
        options:
          - devops-create
          - devops-destroy

env:
  TF_BACKEND_BUCKET: projet-c-terraform-state

jobs:
  devops-create:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'devops-create'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Plan and Apply Terraform
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform-devops
          terraform init
          
          # Plan and Apply
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan
          terraform output -json > "$GITHUB_WORKSPACE/terraform-outputs-raw.json"
          grep -v "^\[command\]" "$GITHUB_WORKSPACE/terraform-outputs-raw.json" | grep -v "^::debug::" > "$GITHUB_WORKSPACE/terraform-outputs.json"
      
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json
          
  devops-destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'devops-destroy'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
            
      - name: Execute Terraform Destroy
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform-devops
          terraform init
          sed -i 's/prevent_destroy = true/prevent_destroy = false/g' *.tf
          terraform destroy -auto-approve
