name: Infrastructure DevOps

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'infra/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'infra/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action à effectuer'
        required: true
        default: 'update'
        type: choice
        options:
          - create
          - update
          - plan
          - configure
          - destroy
      confirm:
        description: 'Confirmer action (requis pour update/destroy)'
        required: false
        type: boolean
        default: true
      configure_bucket_S3:
        description: 'Configurer bucket S3 + DynamoDB (backend Terraform)'
        required: false
        type: boolean
        default: false
      configure_jenkins_master:
        description: 'Configurer Jenkins master'
        required: false
        type: boolean
        default: false
      configure_jenkins_agent:
        description: 'Configurer Jenkins agent'
        required: false
        type: boolean
        default: false
      configure_sonarqube:
        description: 'Configurer SonarQube'
        required: false
        type: boolean
        default: false

jobs:
  # Job pour l'action "create" en mode manuel
  create_manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Create S3 bucket and DynamoDB table for Terraform backend (optionnel)
        if: github.event.inputs.configure_bucket_S3 == 'true'
        run: |
          # Création du bucket S3
          aws s3api create-bucket --bucket projet-c-mohamed --region ca-central-1 --create-bucket-configuration LocationConstraint=ca-central-1 || true
          aws s3api put-bucket-versioning --bucket projet-c-mohamed --versioning-configuration Status=Enabled

          # Création de la table DynamoDB pour le state lock Terraform
          aws dynamodb create-table \
            --table-name terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ca-central-1 || true

      - name: Deploy Infrastructure
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan

  # Job pour l'action "create" en mode automatique
  create_auto:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && (github.event_name == 'push' || github.event_name == 'pull_request')
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Determine action
        id: determine_action
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "action=plan" >> $GITHUB_OUTPUT
          else
            echo "action=update" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Infrastructure (only if action=create)
        if: steps.determine_action.outputs.action == 'create'
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan

  # Job pour l'action "configure" en mode manuel
  configure_manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'configure'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Get IPs from Terraform output
        id: get_output
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          echo "JENKINS_IP=$(terraform output jenkins_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "JENKINS_AGENT_IP=$(terraform output jenkins_agent_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "SONARQUBE_IP=$(terraform output sonarqube_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV            

      - name: Configure Jenkins master
        if: github.event.inputs.configure_jenkins_master == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_master.sh
          ./scripts/deploy_jenkins_master.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins agent
        if: github.event.inputs.configure_jenkins_agent == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_agent.sh
          ./scripts/deploy_jenkins_agent.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure SonarQube
        if: github.event.inputs.configure_sonarqube == 'true'
        run: |
          chmod +x scripts/deploy_sonarqube.sh
          ./scripts/deploy_sonarqube.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

  # Job pour l'action "configure" en mode automatique (généralement pas utilisé)
  configure_auto:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && (github.event_name == 'push' || github.event_name == 'pull_request')
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Determine action
        id: determine_action
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "action=plan" >> $GITHUB_OUTPUT
          else
            echo "action=update" >> $GITHUB_OUTPUT
          fi

      - name: Configure (only if action=configure)
        if: steps.determine_action.outputs.action == 'configure'
        run: |
          echo "Cette action n'est généralement pas déclenchée automatiquement"

  # Job pour l'action "update" en mode manuel
  update_manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Plan Infrastructure Changes
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
      
      - name: Apply Changes
        if: github.event.inputs.confirm == 'true'
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform apply -auto-approve tfplan
          terraform output -json > "$GITHUB_WORKSPACE/terraform-outputs.json"
      
      - name: Confirmation Required
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "❌ Confirmation requise pour appliquer les changements"
          echo "Relancez le workflow avec 'confirm: true'"
          exit 1

      - name: Upload Terraform Outputs
        if: github.event.inputs.confirm == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json

  # Job pour l'action "update" en mode automatique
  update_auto:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Plan and Apply Infrastructure Changes
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan
          terraform output -json > "$GITHUB_WORKSPACE/terraform-outputs.json"
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json

  # Job pour l'action "destroy" en mode manuel
  destroy_manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Confirmation Required
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "❌ Confirmation requise pour détruire l'infrastructure"
          echo "Relancez le workflow avec 'confirm: true'"
          exit 1
            
      - name: Destroy Infrastructure
        if: github.event.inputs.confirm == 'true'
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          sed -i 's/prevent_destroy = true/prevent_destroy = false/g' *.tf
          terraform destroy -auto-approve

  # Job pour l'action "plan" en mode manuel
  plan_manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Terraform Plan uniquement
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan
          
  # Job pour l'action "plan" en mode pull request
  plan_pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Terraform Plan uniquement (PR)
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan