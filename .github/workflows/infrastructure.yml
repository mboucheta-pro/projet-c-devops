name: Infrastructure DevOps

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action √† effectuer'
        required: true
        default: 'configure_components'
        type: choice
        options:
          - create_backend
          - create_infra
          - configure_components
          - destroy
      confirm:
        description: 'Confirmer la destruction (requis pour destroy)'
        required: false
        type: boolean
        default: false
      configure_all:
        description: 'Configurer tous les composants apr√®s cr√©ation'
        required: false
        type: boolean
        default: false
      configure_sonarqube:
        description: 'Configurer SonarQube'
        required: false
        type: boolean
        default: false
      configure_jenkins_master:
        description: 'Configurer Jenkins Master'
        required: false
        type: boolean
        default: false
      configure_jenkins_agent:
        description: 'Configurer Jenkins Agent'
        required: false
        type: boolean
        default: false

jobs:
  # Job pour cr√©er uniquement le backend (S3 + DynamoDB)
  create_backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_backend'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Create S3 bucket and DynamoDB table for Terraform backend
        uses: ./.github/actions/setup-aws-backend

  # Job pour cr√©er et configurer l'infrastructure compl√®te
  create_infra:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_infra'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
          
      - name: Create/Update Infrastructure
        id: terraform
        uses: ./.github/actions/setup-terraform-infrastructure
        with:
          action: 'apply'
          
      - name: Get IPs from Terraform output
        if: github.event.inputs.configure_all == 'true'
        id: get_output
        uses: ./.github/actions/get-infrastructure-ips
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json

      # Configuration compl√®te (si demand√©e)
      - name: Configure SonarQube
        if: github.event.inputs.configure_all == 'true'
        uses: ./.github/actions/configure-component
        with:
          component: 'sonarqube'
          component_ip: ${{ steps.get_output.outputs.sonarqube_ip }}
          should_configure: 'true'

      - name: Configure Jenkins master
        if: github.event.inputs.configure_all == 'true'
        uses: ./.github/actions/configure-component
        with:
          component: 'jenkins-master'
          component_ip: ${{ steps.get_output.outputs.jenkins_ip }}
          should_configure: 'true'

      - name: Configure Jenkins agent
        if: github.event.inputs.configure_all == 'true'
        uses: ./.github/actions/configure-component
        with:
          component: 'jenkins-agent'
          component_ip: ${{ steps.get_output.outputs.jenkins_agent_ip }}
          should_configure: 'true'
          
      - name: Configuration Summary
        if: github.event.inputs.configure_all == 'true'
        run: |
          echo "‚úÖ Toute l'infrastructure a √©t√© cr√©√©e et configur√©e avec succ√®s"
          echo "üîπ SonarQube: http://${{ steps.get_output.outputs.sonarqube_ip }}:9000"
          echo "üîπ Jenkins: http://${{ steps.get_output.outputs.jenkins_ip }}:8080"

  # Job pour d√©truire l'infrastructure
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Confirm Destruction Required
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "‚ùå CONFIRMATION REQUISE: Cette action va d√©truire toute l'infrastructure!"
          echo "Relancez le workflow avec l'option 'confirm' activ√©e pour confirmer la destruction."
          exit 1
            
      - name: Destroy Infrastructure
        if: github.event.inputs.confirm == 'true'
        uses: ./.github/actions/setup-terraform-infrastructure
        with:
          action: 'destroy'

  # Job pour configurer individuellement les composants
  configure_components:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'configure_components'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
          
      - name: Get Infrastructure IPs
        id: get_ips
        uses: ./.github/actions/get-infrastructure-ips

      - name: Configure SonarQube
        uses: ./.github/actions/configure-component
        with:
          component: 'sonarqube'
          component_ip: ${{ steps.get_ips.outputs.sonarqube_ip }}
          should_configure: ${{ github.event.inputs.configure_sonarqube }}

      - name: Configure Jenkins Master
        uses: ./.github/actions/configure-component
        with:
          component: 'jenkins-master'
          component_ip: ${{ steps.get_ips.outputs.jenkins_ip }}
          should_configure: ${{ github.event.inputs.configure_jenkins_master }}

      - name: Configure Jenkins Agent
        uses: ./.github/actions/configure-component
        with:
          component: 'jenkins-agent'
          component_ip: ${{ steps.get_ips.outputs.jenkins_agent_ip }}
          should_configure: ${{ github.event.inputs.configure_jenkins_agent }}
          
      - name: Configuration Summary
        run: |
          echo "üìã R√©sum√© de la configuration:"
          if [ "${{ github.event.inputs.configure_sonarqube }}" == "true" ]; then
            echo "üîπ SonarQube: http://${{ steps.get_ips.outputs.sonarqube_ip }}:9000"
          fi
          if [ "${{ github.event.inputs.configure_jenkins_master }}" == "true" ]; then
            echo "üîπ Jenkins Master: http://${{ steps.get_ips.outputs.jenkins_ip }}:8080"
          fi
          if [ "${{ github.event.inputs.configure_jenkins_agent }}" == "true" ]; then
            echo "üîπ Jenkins Agent: Connect√© au master"
          fi
          echo "‚úÖ Configuration termin√©e avec succ√®s"