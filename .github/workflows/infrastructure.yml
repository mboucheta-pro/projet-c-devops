name: Infrastructure DevOps

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action à effectuer'
        required: true
        default: 'create_infra'
        type: choice
        options:
          - create_backend
          - create_infra
          - configure_components
          - destroy
      confirm:
        description: 'Confirmer la destruction (requis pour destroy)'
        required: false
        type: boolean
        default: false
      configure_all:
        description: 'Configurer tous les composants après création'
        required: false
        type: boolean
        default: false
      configure_sonarqube:
        description: 'Configurer SonarQube'
        required: false
        type: boolean
        default: false
      configure_jenkins_master:
        description: 'Configurer Jenkins Master'
        required: false
        type: boolean
        default: false
      configure_jenkins_agent:
        description: 'Configurer Jenkins Agent'
        required: false
        type: boolean
        default: false

jobs:
  # Job pour créer uniquement le backend (S3 + DynamoDB)
  create_backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_backend'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Create S3 bucket and DynamoDB table for Terraform backend
        run: |
          # Création du bucket S3
          aws s3api create-bucket --bucket projet-c-mohamed --region ca-central-1 --create-bucket-configuration LocationConstraint=ca-central-1 || true
          aws s3api put-bucket-versioning --bucket projet-c-mohamed --versioning-configuration Status=Enabled
          echo "✅ Bucket S3 créé/configuré avec succès"

          # Création de la table DynamoDB pour le state lock Terraform
          aws dynamodb create-table \
            --table-name terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ca-central-1 || true
          echo "✅ Table DynamoDB créée/configurée avec succès"
          
          echo "🔄 Le backend Terraform est prêt à être utilisé"

  # Job pour créer et configurer l'infrastructure complète
  create_infra:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_infra'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
          
      - name: Create/Update Infrastructure
        id: terraform
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan
          terraform output -json > "$GITHUB_WORKSPACE/terraform-outputs.json"
          echo "✅ Infrastructure créée avec succès"
          
      - name: Get IPs from Terraform output
        if: github.event.inputs.configure_all == 'true'
        id: get_output
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          echo "JENKINS_IP=$(terraform output jenkins_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "JENKINS_AGENT_IP=$(terraform output jenkins_agent_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "SONARQUBE_IP=$(terraform output sonarqube_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json

      # Configuration complète (si demandée)
      - name: Configure SonarQube
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_sonarqube.sh
          ./scripts/deploy_sonarqube.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins master
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_master.sh
          ./scripts/deploy_jenkins_master.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins agent
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_agent.sh
          ./scripts/deploy_jenkins_agent.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          
      - name: Configuration Summary
        if: github.event.inputs.configure_all == 'true'
        run: |
          echo "✅ Toute l'infrastructure a été créée et configurée avec succès"
          echo "🔹 SonarQube: http://$SONARQUBE_IP:9000"
          echo "🔹 Jenkins: http://$JENKINS_IP:8080"

  # Job pour détruire l'infrastructure
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Confirm Destruction Required
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "❌ CONFIRMATION REQUISE: Cette action va détruire toute l'infrastructure!"
          echo "Relancez le workflow avec l'option 'confirm' activée pour confirmer la destruction."
          exit 1
            
      - name: Destroy Infrastructure
        if: github.event.inputs.confirm == 'true'
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          sed -i 's/prevent_destroy = true/prevent_destroy = false/g' *.tf || true
          terraform plan -destroy -out="tfplan-destroy"
          terraform apply -auto-approve tfplan-destroy
          echo "🗑️ Infrastructure détruite avec succès"

  # Job pour configurer individuellement les composants
  configure_components:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'configure_components'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
          
      - name: Get Infrastructure IPs
        id: get_ips
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          
          # Récupération des IPs depuis les outputs Terraform
          if terraform output jenkins_ip >/dev/null 2>&1; then
            echo "JENKINS_IP=$(terraform output jenkins_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          fi
          
          if terraform output jenkins_agent_ip >/dev/null 2>&1; then
            echo "JENKINS_AGENT_IP=$(terraform output jenkins_agent_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          fi
          
          if terraform output sonarqube_ip >/dev/null 2>&1; then
            echo "SONARQUBE_IP=$(terraform output sonarqube_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          fi
          
          echo "✅ Récupération des IPs terminée"

      - name: Configure SonarQube
        if: github.event.inputs.configure_sonarqube == 'true'
        run: |
          echo "🔧 Configuration de SonarQube sur $SONARQUBE_IP"
          chmod +x scripts/deploy_sonarqube.sh
          ./scripts/deploy_sonarqube.sh
          echo "✅ SonarQube configuré avec succès: http://$SONARQUBE_IP:9000"
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins Master
        if: github.event.inputs.configure_jenkins_master == 'true'
        run: |
          echo "🔧 Configuration de Jenkins Master sur $JENKINS_IP"
          chmod +x scripts/deploy_jenkins_master.sh
          ./scripts/deploy_jenkins_master.sh
          echo "✅ Jenkins Master configuré avec succès: http://$JENKINS_IP:8080"
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins Agent
        if: github.event.inputs.configure_jenkins_agent == 'true'
        run: |
          echo "🔧 Configuration de Jenkins Agent sur $JENKINS_AGENT_IP"
          chmod +x scripts/deploy_jenkins_agent.sh
          ./scripts/deploy_jenkins_agent.sh
          echo "✅ Jenkins Agent configuré avec succès et connecté au master"
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          
      - name: Configuration Summary
        run: |
          echo "📋 Résumé de la configuration:"
          if [ "${{ github.event.inputs.configure_sonarqube }}" == "true" ]; then
            echo "🔹 SonarQube: http://$SONARQUBE_IP:9000"
          fi
          if [ "${{ github.event.inputs.configure_jenkins_master }}" == "true" ]; then
            echo "🔹 Jenkins Master: http://$JENKINS_IP:8080"
          fi
          if [ "${{ github.event.inputs.configure_jenkins_agent }}" == "true" ]; then
            echo "🔹 Jenkins Agent: Connecté au master"
          fi
          echo "✅ Configuration terminée avec succès"