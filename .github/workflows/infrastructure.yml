name: Infrastructure DevOps

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action √† effectuer'
        required: true
        default: 'create_infra'
        type: choice
        options:
          - create_backend
          - create_infra
          - destroy
      confirm:
        description: 'Confirmer la destruction (requis pour destroy)'
        required: false
        type: boolean
        default: false
      configure_all:
        description: 'Configurer tous les composants apr√®s cr√©ation (SonarQube, Jenkins master et agent)'
        required: false
        type: boolean
        default: true

jobs:
  # Job pour cr√©er uniquement le backend (S3 + DynamoDB)
  create_backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_backend'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}

      - name: Create S3 bucket and DynamoDB table for Terraform backend
        run: |
          # Cr√©ation du bucket S3
          aws s3api create-bucket --bucket projet-c-mohamed --region ca-central-1 --create-bucket-configuration LocationConstraint=ca-central-1 || true
          aws s3api put-bucket-versioning --bucket projet-c-mohamed --versioning-configuration Status=Enabled
          echo "‚úÖ Bucket S3 cr√©√©/configur√© avec succ√®s"

          # Cr√©ation de la table DynamoDB pour le state lock Terraform
          aws dynamodb create-table \
            --table-name terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ca-central-1 || true
          echo "‚úÖ Table DynamoDB cr√©√©e/configur√©e avec succ√®s"
          
          echo "üîÑ Le backend Terraform est pr√™t √† √™tre utilis√©"

  # Job pour cr√©er et configurer l'infrastructure compl√®te
  create_infra:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create_infra'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
          
      - name: Create/Update Infrastructure
        id: terraform
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          terraform validate
          terraform plan -out="tfplan"
          terraform apply -auto-approve tfplan
          terraform output -json > "$GITHUB_WORKSPACE/terraform-outputs.json"
          echo "‚úÖ Infrastructure cr√©√©e avec succ√®s"
          
      - name: Get IPs from Terraform output
        if: github.event.inputs.configure_all == 'true'
        id: get_output
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          echo "JENKINS_IP=$(terraform output jenkins_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "JENKINS_AGENT_IP=$(terraform output jenkins_agent_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          echo "SONARQUBE_IP=$(terraform output sonarqube_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1)" >> $GITHUB_ENV
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform-outputs.json

      # Configuration compl√®te (si demand√©e)
      - name: Configure SonarQube
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_sonarqube.sh
          ./scripts/deploy_sonarqube.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins master
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_master.sh
          ./scripts/deploy_jenkins_master.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Configure Jenkins agent
        if: github.event.inputs.configure_all == 'true'
        run: |
          chmod +x scripts/deploy_jenkins_agent.sh
          ./scripts/deploy_jenkins_agent.sh
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          
      - name: Configuration Summary
        if: github.event.inputs.configure_all == 'true'
        run: |
          echo "‚úÖ Toute l'infrastructure a √©t√© cr√©√©e et configur√©e avec succ√®s"
          echo "üîπ SonarQube: http://$SONARQUBE_IP:9000"
          echo "üîπ Jenkins: http://$JENKINS_IP:8080"

  # Job pour d√©truire l'infrastructure
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-terraform
        with:
          aws_credentials: ${{ secrets.AWS_CREDENTIALS_BASE64 }}
      
      - name: Confirm Destruction Required
        if: github.event.inputs.confirm != 'true'
        run: |
          echo "‚ùå CONFIRMATION REQUISE: Cette action va d√©truire toute l'infrastructure!"
          echo "Relancez le workflow avec l'option 'confirm' activ√©e pour confirmer la destruction."
          exit 1
            
      - name: Destroy Infrastructure
        if: github.event.inputs.confirm == 'true'
        run: |
          cd $GITHUB_WORKSPACE/infra/terraform
          terraform init
          sed -i 's/prevent_destroy = true/prevent_destroy = false/g' *.tf || true
          terraform plan -destroy -out="tfplan-destroy"
          terraform apply -auto-approve tfplan-destroy
          echo "üóëÔ∏è Infrastructure d√©truite avec succ√®s"